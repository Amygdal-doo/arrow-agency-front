{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/aisabektas/projects/arrow-agency-front/app/components/CVForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useState } from \"react\";\nimport axios, { AxiosResponse } from \"axios\";\n\nconst userFormSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  surname: z\n    .string()\n    .min(2, { message: \"Surname must be at least 2 characters.\" }),\n  email: z.string().email({ message: \"Invalid email address.\" }),\n  phone: z.string().min(6, { message: \"Phone number must be valid.\" }),\n  file: z\n    .instanceof(File, { message: \"File is required and must be a PDF.\" })\n    .refine((file) => file.type === \"application/pdf\", {\n      message: \"Only PDF files are allowed.\",\n    }),\n  technologies: z.array(z.string()).optional(),\n});\n\ntype UserFormInputs = z.infer<typeof userFormSchema>;\n\nconst CVForm = () => {\n  const [fileName, setFileName] = useState<string | null>(null);\n  const [technologies, setTechnologies] = useState<string[]>([]);\n  const [techInput, setTechInput] = useState(\"\");\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    setError,\n    clearErrors,\n    formState: { errors },\n  } = useForm<UserFormInputs>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      name: \"\",\n      surname: \"\",\n      email: \"\",\n      phone: \"\",\n      technologies: [],\n    },\n  });\n\n  const onSubmit = async (data: UserFormInputs) => {\n    console.log(\"Form Data:\", data);\n    try {\n      const formData = new FormData();\n      formData.append(\"name\", data.name);\n      formData.append(\"surname\", data.surname);\n      formData.append(\"email\", data.email);\n      formData.append(\"phone\", data.phone);\n\n      if (data.file) {\n        formData.append(\"file\", data.file);\n      }\n\n      if (data.technologies && data.technologies.length > 0) {\n        formData.append(\"technologies\", JSON.stringify(data.technologies));\n      }\n\n      const response: AxiosResponse = await axios.post(\n        \"https://arrow-agency-back-production.up.railway.app/api/pdf/cv\",\n        formData,\n        {\n          headers: { \"Content-Type\": \"multipart/form-data\" },\n        }\n      );\n\n      console.log(\"CV Saved Successfully:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error saving CV:\", error);\n      throw error;\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n\n    if (!file) {\n      setError(\"file\", {\n        type: \"manual\",\n        message: \"File is required and must be a PDF.\",\n      });\n      return;\n    }\n\n    if (file.type !== \"application/pdf\") {\n      setError(\"file\", {\n        type: \"manual\",\n        message: \"Only PDF files are allowed.\",\n      });\n      return;\n    }\n\n    setFileName(file.name);\n    setValue(\"file\", file);\n    clearErrors(\"file\"); // Remove error message when a valid file is uploaded\n  };\n\n  const handleAddTechnology = () => {\n    if (techInput.trim() !== \"\") {\n      const updatedTechnologies = [...technologies, techInput];\n      setTechnologies(updatedTechnologies);\n      setValue(\"technologies\", updatedTechnologies);\n      setTechInput(\"\");\n    }\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      handleAddTechnology();\n    }\n  };\n\n  const handleRemoveTechnology = (index: number) => {\n    const updatedTechnologies = technologies.filter((_, i) => i !== index);\n    setTechnologies(updatedTechnologies);\n    setValue(\"technologies\", updatedTechnologies);\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit(onSubmit)}\n      className=\"w-full max-w-md min-2-lg mx-auto space-y-4 pb-16 pt-8 px-8 rounded-md shadow-2xl\"\n    >\n      <div className=\"flex justify-center pb-8 flex-col items-center\">\n        <p className=\"text-2xl font-bold text-gray-500 pr-10\">Amygdal</p>\n        <p className=\"text-2xl font-bold text-orange-500 pl-20\">CV Editor</p>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-bold\">Name</label>\n        <input {...register(\"name\")} className=\"w-full border p-2 rounded\" />\n        {errors.name && (\n          <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-bold\">Surname</label>\n        <input {...register(\"surname\")} className=\"w-full border p-2 rounded\" />\n        {errors.surname && (\n          <p className=\"text-red-500 text-sm\">{errors.surname.message}</p>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-bold\">Email</label>\n        <input\n          {...register(\"email\")}\n          type=\"email\"\n          className=\"w-full border p-2 rounded\"\n        />\n        {errors.email && (\n          <p className=\"text-red-500 text-sm\">{errors.email.message}</p>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-bold\">Phone Number</label>\n        <input {...register(\"phone\")} className=\"w-full border p-2 rounded\" />\n        {errors.phone && (\n          <p className=\"text-red-500 text-sm\">{errors.phone.message}</p>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-bold\">Upload PDF</label>\n        <div className=\"relative w-full\">\n          <input\n            type=\"file\"\n            accept=\".pdf\"\n            onChange={handleFileUpload}\n            className=\"hidden\"\n            id=\"file-upload\"\n          />\n          <label\n            htmlFor=\"file-upload\"\n            className=\"bg-gray-500 text-white text-sm w-full font-bold py-2 px-4 rounded cursor-pointer inline-block text-center\"\n          >\n            Upload File\n          </label>\n        </div>\n        {fileName && (\n          <p className=\"text-sm mt-2 font-bold text-orange-500\">\n            Selected file: {fileName}\n          </p>\n        )}\n        {errors.file && (\n          <p className=\"text-red-500 text-sm\">{errors.file.message}</p>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-bold\">Technologies</label>\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={techInput}\n            onChange={(e) => setTechInput(e.target.value)}\n            onKeyDown={handleKeyPress}\n            className=\"w-full border p-2 rounded\"\n            placeholder=\"Add technology\"\n          />\n          <button\n            type=\"button\"\n            onClick={handleAddTechnology}\n            className=\"bg-gray-500 text-sm font-bold text-white py-2 px-4 rounded\"\n          >\n            Add\n          </button>\n        </div>\n        <div className=\"mt-2 flex flex-wrap gap-2\">\n          {technologies.map((tech, index) => (\n            <div\n              key={index}\n              className=\"flex items-center group bg-gray-200 py-2 px-4 rounded\"\n            >\n              <span>{tech}</span>\n              <button\n                type=\"button\"\n                onClick={() => handleRemoveTechnology(index)}\n                className=\"ml-3 text-red-300 group-hover:text-red-600 font-bold\"\n              >\n                âœ•\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"w-full bg-orange-500 text-sm font-bold text-white p-2 rounded\"\n      >\n        Submit\n      </button>\n    </form>\n  );\n};\n\nexport default CVForm;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":["file:///Users/aisabektas/projects/arrow-agency-front/app/components/LoginForm.tsx"],"sourcesContent":["\"use client\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useState } from \"react\";\n\nconst loginSchema = z.object({\n  email: z.string().email({ message: \"Invalid email address.\" }),\n  password: z\n    .string()\n    .min(6, { message: \"Password must be at least 6 characters.\" }),\n});\n\ntype LoginInputs = z.infer<typeof loginSchema>;\n\nconst LoginForm = () => {\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginInputs>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const onSubmit = async (data: LoginInputs) => {\n    console.log(\"Login successful:\", data);\n    setLoading(true);\n    setErrorMessage(\"\");\n    try {\n      //   const response = await axios.post(\"/api/login\", data);\n      console.log(\"Login successful:\", response.data);\n    } catch (error) {\n      setErrorMessage(\"Invalid email or password. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit(onSubmit)}\n      className=\"w-full max-w-md mx-auto space-y-4 p-6 rounded-md shadow-xl\"\n    >\n      <h2 className=\"text-2xl font-bold text-center\">Login</h2>\n\n      {errorMessage && (\n        <p className=\"text-red-500 text-sm text-center\">{errorMessage}</p>\n      )}\n\n      <div>\n        <label className=\"block text-sm font-bold\">Email</label>\n        <input\n          {...register(\"email\")}\n          type=\"email\"\n          className=\"w-full border p-2 rounded\"\n        />\n        {errors.email && (\n          <p className=\"text-red-500 text-sm\">{errors.email.message}</p>\n        )}\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-bold\">Password</label>\n        <input\n          {...register(\"password\")}\n          type=\"password\"\n          className=\"w-full border p-2 rounded\"\n        />\n        {errors.password && (\n          <p className=\"text-red-500 text-sm\">{errors.password.message}</p>\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"w-full bg-blue-500 text-white font-bold p-2 rounded\"\n        disabled={loading}\n      >\n        {loading ? \"Logging in...\" : \"Login\"}\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n"],"names":[],"mappings":";;;;AAGA;AACA;AAFA;AADA;;;AADA;;;;;AAMA,MAAM,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAyB;IAC5D,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAA0C;AACjE;AAIA,MAAM,YAAY;;IAChB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,EACJ,QAAQ,EACR,YAAY,EACZ,WAAW,EAAE,MAAM,EAAE,EACtB,GAAG,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAe;QACvB,UAAU,CAAA,GAAA,iKAAA,CAAA,cAAW,AAAD,EAAE;IACxB;IAEA,MAAM,WAAW,OAAO;QACtB,QAAQ,GAAG,CAAC,qBAAqB;QACjC,WAAW;QACX,gBAAgB;QAChB,IAAI;YACF,2DAA2D;YAC3D,QAAQ,GAAG,CAAC,qBAAqB,SAAS,IAAI;QAChD,EAAE,OAAO,OAAO;YACd,gBAAgB;QAClB,SAAU;YACR,WAAW;QACb;IACF;IAEA,qBACE,6LAAC;QACC,UAAU,aAAa;QACvB,WAAU;;0BAEV,6LAAC;gBAAG,WAAU;0BAAiC;;;;;;YAE9C,8BACC,6LAAC;gBAAE,WAAU;0BAAoC;;;;;;0BAGnD,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;kCAA0B;;;;;;kCAC3C,6LAAC;wBACE,GAAG,SAAS,QAAQ;wBACrB,MAAK;wBACL,WAAU;;;;;;oBAEX,OAAO,KAAK,kBACX,6LAAC;wBAAE,WAAU;kCAAwB,OAAO,KAAK,CAAC,OAAO;;;;;;;;;;;;0BAI7D,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;kCAA0B;;;;;;kCAC3C,6LAAC;wBACE,GAAG,SAAS,WAAW;wBACxB,MAAK;wBACL,WAAU;;;;;;oBAEX,OAAO,QAAQ,kBACd,6LAAC;wBAAE,WAAU;kCAAwB,OAAO,QAAQ,CAAC,OAAO;;;;;;;;;;;;0BAIhE,6LAAC;gBACC,MAAK;gBACL,WAAU;gBACV,UAAU;0BAET,UAAU,kBAAkB;;;;;;;;;;;;AAIrC;GAtEM;;QAQA,iKAAA,CAAA,UAAO;;;KARP;uCAwES"}},
    {"offset": {"line": 621, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}