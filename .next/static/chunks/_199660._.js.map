{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/aisabektas/projects/arrow-agency-front/providers/ApplicantDetailsProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { AxiosResponse } from \"axios\";\nimport { apiService } from \"@/core/services/apiService\";\nimport { useSession } from \"next-auth/react\";\n\nexport interface IExperience {\n  id?: string;\n  position: string;\n  company: string;\n  startDate: string;\n  endDate: string;\n  description: string;\n}\n\nexport interface IProject {\n  id?: string;\n  name: string;\n  description: string;\n  startDate: string;\n  endDate: string;\n  url: string;\n}\n\nexport interface IEducation {\n  id?: string;\n  institution: string;\n  degree: string;\n  field: string;\n  startDate: string;\n  endDate: string;\n}\n\nexport interface ICertificate {\n  id?: string;\n  name: string;\n  issuer: string;\n  issueDate: string;\n  expirationDate: string;\n  url: string;\n}\n\nexport interface ICourse {\n  id?: string;\n  name: string;\n  url: string;\n  startDate: string;\n  endDate: string;\n}\n\nexport interface ISocial {\n  id?: string;\n  name: string;\n  url: string;\n}\n\nexport interface ILanguage {\n  id?: string;\n  name: string;\n  efficiency: string;\n}\n\nexport interface ISkill {\n  id?: string;\n  name: string;\n  efficiency: string;\n  // cvId: string;\n}\n\nexport interface IFile {\n  id: string;\n  name: string;\n  url: string;\n  extension: string;\n  fileCreatedAt: string;\n  userId: string;\n  applicantId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface IDelete {\n  experience: string[];\n  education: string[];\n  projects: string[];\n  courses: string[];\n  certificates: string[];\n  languages: string[];\n  socials: string[];\n  skills: string[];\n}\n\ninterface ICV {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  companyName: string;\n  summary: string;\n  skills: ISkill[];\n  hobbies: string[];\n  experience: IExperience[];\n  projects: IProject[];\n  educations: IEducation[];\n  certificates: ICertificate[];\n  courses: ICourse[];\n  languages: ILanguage[];\n  socials: ISocial[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface IApplicantDetails {\n  cv: ICV;\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  technologies: string[];\n  userId: string;\n  cvId: string;\n  file: IFile;\n  templateId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ApplicantContextType {\n  applicant?: IApplicantDetails;\n  loading: boolean;\n  error: string | null;\n  firstName: string;\n  setFirstName: (value: string) => void;\n  companyName: string;\n  setCompanyName: (value: string) => void;\n  lastName: string;\n  setLastName: (value: string) => void;\n  email: string;\n  setEmail: (value: string) => void;\n  phone: string;\n  setPhone: (value: string) => void;\n  summary: string;\n  setSummary: (value: string) => void;\n  skills: ISkill[];\n  setSkills: (value: ISkill[]) => void;\n  currentSkills: ISkill[];\n  setCurrentSkills: (value: ISkill[]) => void;\n  hobbies: string[];\n  setHobbies: (value: string[]) => void;\n  experience: IExperience[];\n  setExperience: (value: IExperience[]) => void;\n  currentExperience: IExperience[];\n  setCurrentExperience: (value: IExperience[]) => void;\n  projects: IProject[];\n  setProjects: (value: IProject[]) => void;\n  currentProjects: IProject[];\n  setCurrentProjects: (value: IProject[]) => void;\n  educations: IEducation[];\n  setEducations: (value: IEducation[]) => void;\n  currentEducations: IEducation[];\n  setCurrentEducations: (value: IEducation[]) => void;\n  certificates: ICertificate[];\n  setCertificates: (value: ICertificate[]) => void;\n  currentCertificates: ICertificate[];\n  setCurrentCertificates: (value: ICertificate[]) => void;\n  courses: ICourse[];\n  setCourses: (value: ICourse[]) => void;\n  currentCourses: ICourse[];\n  setCurrentCourses: (value: ICourse[]) => void;\n  socials: ISocial[];\n  setSocials: (value: ISocial[]) => void;\n  currentSocials: ISocial[];\n  setCurrentSocials: (value: ISocial[]) => void;\n  languages: ILanguage[];\n  setLanguages: (value: ILanguage[]) => void;\n  currentLanguages: ILanguage[];\n  setCurrentLanguages: (value: ILanguage[]) => void;\n  deleteItems: IDelete;\n  setDeleteItems: (value: IDelete) => void;\n  templateId: string;\n  setTemplateId: (value: string) => void;\n  updateApplicant: () => Promise<void>;\n}\n\nconst ApplicantContext = createContext<ApplicantContextType | undefined>(\n  undefined\n);\n\nexport const ApplicantProvider = ({\n  children,\n  id,\n}: {\n  children: ReactNode;\n  id: string;\n}) => {\n  const { data: session, status } = useSession();\n  const [applicant, setApplicant] = useState<IApplicantDetails | undefined>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Editable state for each field\n  const [companyName, setCompanyName] = useState<string>(\"\");\n  const [firstName, setFirstName] = useState<string>(\"\");\n  const [lastName, setLastName] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [phone, setPhone] = useState<string>(\"\");\n  const [summary, setSummary] = useState<string>(\"\");\n  const [skills, setSkills] = useState<ISkill[]>([]);\n  const [currentSkills, setCurrentSkills] = useState<ISkill[]>([]);\n  const [hobbies, setHobbies] = useState<string[]>([]);\n  const [experience, setExperience] = useState<IExperience[]>([]);\n  const [currentExperience, setCurrentExperience] = useState<IExperience[]>([]);\n  const [projects, setProjects] = useState<IProject[]>([]);\n  const [currentProjects, setCurrentProjects] = useState<IProject[]>([]);\n  const [educations, setEducations] = useState<IEducation[]>([]);\n  const [currentEducations, setCurrentEducations] = useState<IEducation[]>([]);\n  const [certificates, setCertificates] = useState<ICertificate[]>([]);\n  const [currentCertificates, setCurrentCertificates] = useState<\n    ICertificate[]\n  >([]);\n  const [courses, setCourses] = useState<ICourse[]>([]);\n  const [currentCourses, setCurrentCourses] = useState<ICourse[]>([]);\n  const [socials, setSocials] = useState<ISocial[]>([]);\n  const [currentSocials, setCurrentSocials] = useState<ISocial[]>([]);\n  const [languages, setLanguages] = useState<ILanguage[]>([]);\n  const [currentLanguages, setCurrentLanguages] = useState<ILanguage[]>([]);\n  const [deleteItems, setDeleteItems] = useState<IDelete>({\n    experience: [],\n    education: [],\n    projects: [],\n    courses: [],\n    certificates: [],\n    languages: [],\n    socials: [],\n    skills: [],\n  });\n  const [templateId, setTemplateId] = useState<string>(\"\");\n\n  const fetchApplicant = async () => {\n    setLoading(true);\n    try {\n      if (session?.user?.accessToken) {\n        const response: AxiosResponse<IApplicantDetails> = await apiService.get(\n          `applicant/${id}`\n        );\n        const data = response.data;\n        setApplicant(data);\n        setTemplateId(data.templateId);\n\n        setFirstName(data.cv.firstName);\n        setCompanyName(data.cv.companyName);\n        setLastName(data.cv.lastName);\n        setEmail(data.cv.email);\n        setPhone(data.cv.phone);\n        setSummary(data.cv.summary);\n        setSkills(data.cv.skills);\n        setCurrentSkills(data.cv.skills);\n        setHobbies(data.cv.hobbies);\n        setExperience(data.cv.experience);\n        setCurrentExperience(data.cv.experience);\n        setProjects(data.cv.projects);\n        setCurrentProjects(data.cv.projects);\n        setEducations(data.cv.educations);\n        setCurrentEducations(data.cv.educations);\n        setCertificates(data.cv.certificates);\n        setCurrentCertificates(data.cv.certificates);\n        setCourses(data.cv.courses);\n        setCurrentCourses(data.cv.courses);\n        setSocials(data.cv.socials);\n        setCurrentSocials(data.cv.socials);\n        setLanguages(data.cv.languages);\n        setCurrentLanguages(data.cv.languages);\n      }\n    } catch (err) {\n      setError((err as Error).message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateApplicant = async () => {\n    try {\n      setLoading(true);\n      await apiService.put(`/cv/${applicant?.cvId}?templateId=${templateId}`, {\n        firstName,\n        lastName,\n        email,\n        phone,\n        summary,\n        skills: skills || [],\n        hobbies,\n        experience,\n        projects,\n        educations,\n        certificates,\n        courses,\n        socials,\n        languages,\n        delete: {\n          expirience: deleteItems.experience,\n          education: deleteItems.education,\n          projects: deleteItems.projects,\n          courses: deleteItems.courses,\n          certificates: deleteItems.certificates,\n          languages: deleteItems.languages,\n          socials: deleteItems.socials,\n          skills: deleteItems.skills,\n        },\n      });\n      fetchApplicant();\n    } catch (err) {\n      setError((err as Error).message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (status === \"authenticated\") {\n      fetchApplicant();\n    }\n  }, [status, session, id]);\n\n  return (\n    <ApplicantContext.Provider\n      value={{\n        applicant,\n        loading,\n        error,\n        companyName,\n        setCompanyName,\n        firstName,\n        setFirstName,\n        lastName,\n        setLastName,\n        email,\n        setEmail,\n        phone,\n        setPhone,\n        summary,\n        setSummary,\n        skills,\n        setSkills,\n        currentSkills,\n        setCurrentSkills,\n        hobbies,\n        setHobbies,\n        experience,\n        setExperience,\n        currentExperience,\n        setCurrentExperience,\n        projects,\n        setProjects,\n        currentProjects,\n        setCurrentProjects,\n        educations,\n        setEducations,\n        currentEducations,\n        setCurrentEducations,\n        certificates,\n        setCertificates,\n        currentCertificates,\n        setCurrentCertificates,\n        courses,\n        setCourses,\n        currentCourses,\n        setCurrentCourses,\n        socials,\n        setSocials,\n        currentSocials,\n        setCurrentSocials,\n        languages,\n        setLanguages,\n        currentLanguages,\n        setCurrentLanguages,\n        deleteItems,\n        setDeleteItems,\n        templateId,\n        setTemplateId,\n        updateApplicant,\n      }}\n    >\n      {children}\n    </ApplicantContext.Provider>\n  );\n};\n\nexport const useApplicant = () => {\n  const context = useContext(ApplicantContext);\n  if (!context) {\n    throw new Error(\"useApplicant must be used within an ApplicantProvider\");\n  }\n  return context;\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["file:///Users/aisabektas/projects/arrow-agency-front/app/applicant/%5Bid%5D/layout.tsx"],"sourcesContent":["\"use client\";\n\nimport { use } from \"react\";\nimport { ApplicantProvider } from \"@/providers/ApplicantDetailsProvider\";\n\nexport default function ApplicantDetailsLayout({\n  children,\n  params,\n}: Readonly<{\n  children: React.ReactNode;\n  params: Promise<{ id: string }>;\n}>) {\n  const { id } = use(params); // Unwrap params using `use()`\n\n  return <ApplicantProvider id={id}>{children}</ApplicantProvider>;\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS,uBAAuB,EAC7C,QAAQ,EACR,MAAM,EAIN;IACA,MAAM,EAAE,EAAE,EAAE,GAAG,CAAA,GAAA,6JAAA,CAAA,MAAG,AAAD,EAAE,SAAS,8BAA8B;IAE1D,qBAAO,6LAAC,yIAAA,CAAA,oBAAiB;QAAC,IAAI;kBAAK;;;;;;AACrC;KAVwB"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}