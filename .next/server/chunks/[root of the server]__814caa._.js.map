{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///Users/aisabektas/projects/arrow-agency-front/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport NextAuth, { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n\ntype Profile = {\n  createdAt: string;\n  email: string;\n  firstName: string;\n  id: string;\n  lastName: string;\n  role: string;\n  updatedAt: string;\n};\n\n// Extend the types\ndeclare module \"next-auth\" {\n  interface User {\n    id?: string;\n    accessToken?: string;\n    refreshToken?: string;\n    profile?: Profile;\n  }\n\n  interface Session {\n    user: {\n      accessToken?: string;\n      refreshToken?: string;\n      profile?: Profile;\n    };\n  }\n\n  interface JWT {\n    accessToken?: string | undefined;\n    refreshToken?: string | undefined;\n    accessTokenExpires?: number;\n    profile?: Profile;\n  }\n}\n\ntype DecodedToken = {\n  exp: number; // Expiry time in seconds since the Unix epoch\n  iat: number; // Issued at time in seconds since the Unix epoch\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any; // Other properties\n};\n\nconst authOptions: NextAuthOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  providers: [\n    CredentialsProvider({\n      type: \"credentials\",\n      credentials: {},\n      async authorize(credentials) {\n        try {\n          const { email, password } = credentials as {\n            email: string;\n            password: string;\n          };\n\n          // Make a request to backend API\n          const response = await axios.post(\n            `${process.env.NEXT_PUBLIC_BACKEND_API_URL}auth/login`,\n            {\n              email,\n              password,\n            }\n          );\n\n          console.log(\"response\", response);\n\n          if (response.status === 200) {\n            const user = response.data;\n            console.log(\"111111\", response);\n            // Fetch the profile data using the accessToken\n            const profileResponse = await axios.get(\n              `${process.env.NEXT_PUBLIC_BACKEND_API_URL}users/me`,\n              {\n                headers: {\n                  Authorization: `Bearer ${user.accessToken}`,\n                },\n              }\n            );\n            console.log(\"user auth\", user);\n            console.log(\"profile response auth\", profileResponse.data);\n            // Return a user object with required fields\n            return {\n              accessToken: user.accessToken,\n              refreshToken: user.refreshToken,\n              profile: profileResponse.data,\n            };\n          } else {\n            throw new Error(\"Invalid credentials\");\n          }\n        } catch (error) {\n          console.error(\"Error during authorization:\", error);\n          throw new Error(\"Invalid credentials\");\n        }\n      },\n    }),\n    // GoogleProvider({\n    //   clientId: process.env.GOOGLE_CLIENT_ID!,\n    //   clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    // }),\n    // FacebookProvider({\n    //   clientId: process.env.FACEBOOK_CLIENT_ID!,\n    //   clientSecret: process.env.FACEBOOK_CLIENT_SECRET!,\n    // }),\n    // Instagram({\n    //   clientId: process.env.INSTAGRAM_CLIENT_ID!,\n    //   clientSecret: process.env.INSTAGRAM_CLIENT_SECRET!,\n    // }),\n  ],\n  pages: {\n    signIn: \"/login\",\n  },\n  callbacks: {\n    async jwt({ token, user, account }) {\n      console.log(`In jwt callback - Token is ${JSON.stringify(token)}`);\n\n      if (account?.provider === \"facebook\") {\n        console.log(\"Profile facebook account...\", account);\n        console.log(\"Profile facebook user...\", user);\n        console.log(\"Profile facebook token...\", token);\n      }\n\n      if (account?.provider === \"google\") {\n        token.accessToken = account.access_token;\n        console.log(\"Profile google account...\", account);\n        const profileResponse = await axios.get(\n          `${process.env.NEXT_PUBLIC_BACKEND_API_URL}auth/google/token?token=${account.id_token}`\n        );\n\n        // token.profile = profileResponse.data;\n        token.accessToken = profileResponse.data.accessToken;\n        token.refreshToken = profileResponse.data.refreshToken;\n        console.log(\"Profile google...\", profileResponse.data);\n\n        const profileResponseReal = await axios.get(\n          `${process.env.NEXT_PUBLIC_BACKEND_API_URL}user/me`,\n          {\n            headers: {\n              Authorization: `Bearer ${profileResponse.data.accessToken}`,\n            },\n          }\n        );\n\n        token.profile = profileResponseReal.data;\n\n        return token;\n      } else {\n        if (token?.accessToken === \"string\") {\n          const decodedToken = jwtDecode<DecodedToken>(token.accessToken);\n          console.log(decodedToken);\n\n          token.accessTokenExpires = decodedToken?.exp * 1000;\n        }\n\n        if (user) {\n          // Add additional user properties to the token\n          token.accessToken = user.accessToken as string;\n          token.refreshToken = user.refreshToken;\n          token.profile = user.profile; // Add profile to token if needed\n        }\n\n        if (\n          typeof token.accessTokenExpires === \"number\" &&\n          Date.now() < token.accessTokenExpires\n        ) {\n          return token;\n        }\n\n        // Access token has expired, try to update it\n        console.log(\"**** Update Refresh token ******\");\n        return token;\n      }\n      // return refreshAccessToken(token);\n    },\n    async session({ session, token }) {\n      // Ensure session.user is defined before adding properties\n      console.log(\"session\", session);\n      console.log(\"session token\", token);\n      if (session.user) {\n        session.user.accessToken = token.accessToken as string;\n        session.user.refreshToken = token.refreshToken as string;\n        session.user.profile = token.profile as Profile; // Add profile to session if needed\n      }\n      return session;\n    },\n  },\n};\n\nexport const GET = NextAuth(authOptions);\nexport const POST = NextAuth(authOptions);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}